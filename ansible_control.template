
{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "",
    "Parameters": {
      "KeyName" : {
          "Description" : "Name of existing EC2 key pair to enable SSH access to instances.",
          "Type" : "AWS::EC2::KeyPair::KeyName",
          "Default": "myec2key",
          "ConstraintDescription" : "Must be a valid EC2 key pair."
      },
      "ImageId":{
          "Description": "AMI id for instance",
          "Type": "String",
          "Default": "ami-643b1972"
      },
      "InstanceType" : {
          "Description" : "Type of EC2 instance to launch.",
          "Type": "String",
          "Default" : "t2.micro",
          "AllowedValues" : ["t2.micro"],
          "ConstraintDescription" : "Must be a valid EC2 instance type."
      },
      "Environment" : {
          "Description" : "Environment the stack is deployed to such as prodution, test, or development.",
          "Type" : "String",
          "Default" : "DEV",
          "AllowedValues" : ["DEV","TEST","PROD"]
      },
    "Subnets": {
          "Description": "",
          "Type": "CommaDelimitedList",
          "Default":"subnet-3c2a6a4a,subnet-0fe4ae32"
      },
      "VpcId": {
          "Description": "Id of a VPC",
          "Type": "String",
          "Default": "vpc-3d97705a"
      }      
    },
    "Conditions": {
        "CreateProdResources" : {"Fn::Equals" : [{"Ref" : "Environment"}, "prod"]},
        "CreateDevResources" : {"Fn::Equals" : [ {"Ref": "Environment"}, "dev"]},
        "CreateTestResoures" : {"Fn::Equals" : [ {"Ref": "Environment"}, "test"]}        
    },
    "Resources": {
        "AnsibleIntSecGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Ansible internal security group",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": "172.31.48.0/20",
                        "FromPort": "22",
                        "ToPort": "22"
                    },
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": "172.31.32.0/20",
                        "FromPort": "22",
                        "ToPort": "22"
                    },
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": "172.31.16.0/20",
                        "FromPort": "22",
                        "ToPort": "22"
                    },
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": "172.31.64.0/20",
                        "FromPort": "22",
                        "ToPort": "22"
                    },
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": "172.31.96.0/20",
                        "FromPort": "22",
                        "ToPort": "22"
                    }
                ],
                "Tags": [
                    {"Key":"Group Name","Value":"int-ansible"},
                    {"Key":"Name","Value":"int-ansible"}                    
                ],
                "VpcId": {"Ref":"VpcId"}
            }
        },
        
    "AnsibleControlServer" : {
          "Type" : "AWS::EC2::Instance",
        "Properties" : {
              "Tags" : [
                  {"Key":"Name", "Value" : "Ansible Control Server"},                  
                  {"Key":"Environment", "Value":{"Ref":"Environment"} }
              ],
              "KeyName" : { "Ref" : "KeyName" },
              "SecurityGroupIds" : [{ "Ref" : "AnsibleIntSecGroup" }],
              "SubnetId" :{"Fn::Select": ["0",{"Ref":"Subnets"}]},
              "ImageId" : {"Ref":"ImageId"},
              "InstanceType" : {"Ref" : "InstanceType" },
              "UserData" : {"Fn::Base64": {"Fn::Join" : ["",[
                  "#!/bin/bash \n",
                  "yum update -y aws-cfn-bootstrap \n",
                  "pip install --upgrade pip \n",
                  "ln -s /usr/local/bin/pip /usr/bin/pip \n",
                  "pip install ansible \n"
              ]
              ]}},
              "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {"VolumeSize": "20"}
                    }
              ]                
        }
    }
},

  "Outputs" : {  }

}